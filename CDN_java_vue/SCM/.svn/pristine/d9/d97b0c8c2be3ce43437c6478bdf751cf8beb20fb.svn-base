package kr.happyjob.study.dlm.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.dlm.model.StockedModel;
import kr.happyjob.study.dlm.model.SupplierInfoModel;
import kr.happyjob.study.dlm.service.StockedService;
import kr.happyjob.study.scm.model.ScmOrderModel;

@Controller
@RequestMapping("/dlm/")
public class StockedController {
	
	@Autowired
	StockedService stockedService;
	
	// Set logger
	private final Logger logger=LogManager.getLogger(this.getClass());
	
	// Get class name for logger
	private final String className=this.getClass().toString();
	
	// 입고 처리 초기 화면
	@RequestMapping("purchaseorder.do")
	public String purchaseorder(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, 
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+Start"+className+".purchaseorder");
		logger.info("  -paramMap : "+paramMap);
		
		logger.info("+End"+className+".purchaseorder");
		
		return "dlm/purchaseorder";		
	}	 
	
	// 입고 처리할 발주 리스트
	@RequestMapping("stockedList.do")
	public String orderList(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, 
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+Start" + className + ".stockedList");
		logger.info("  -paramMap : "+ paramMap);
		
		int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
		int currentPage = Integer.parseInt((String) paramMap.get("currentPage"));
		int startPoint = (currentPage - 1) * pageSize;		
		
		paramMap.put("pageSize", pageSize);
		paramMap.put("startPoint", startPoint);
		
		List<StockedModel> stockedList = stockedService.stockedList(paramMap);		
		
		int totalCnt=stockedService.totalCnt(paramMap);
		
		model.addAttribute("stockedList", stockedList);
		model.addAttribute("totalCnt", totalCnt);
		
		logger.info("+End" + className + ".stockedList");
				
		return "dlm/stockedList";	
	}

	
	// 입고 완료 처리를 위해 발주 정보 업데이트
	@RequestMapping("stockUpdate.do")
	@ResponseBody	
	public Map<String, Object> stockUpdate(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, 
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".stockUpdate");
		logger.info("   - paramMap : " + paramMap);
				
		int sqlReturn = 0;
		
		paramMap.put("loginid", session.getAttribute("loginId"));		
		
		sqlReturn = stockedService.stockUpdate(paramMap);		
		
		// 상품 테이블에 입고 수량만큼 재고 업데이트
		sqlReturn += stockedService.productStockUpdate(paramMap);
		
		Map<String, Object> returnMap = new HashMap<String, Object>();
		
		if(sqlReturn > 1) {
			returnMap.put("result", "SUCCESS");
		} else {
			returnMap.put("result", "FAIL");
		}
		
		logger.info("+ End " + className + ".purchaseUpdate");	
		
		return returnMap;		
	}

	// 납품 업체 정보 가져오기
	@RequestMapping("selectSup.do")
	@ResponseBody
	public Map<String, Object> selectSup(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, 
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".selectSup");
		logger.info("   - paramMap : " + paramMap);
				
		SupplierInfoModel sectInfo = stockedService.selectSup(paramMap);
				
		Map<String, Object> returnMap=new HashMap<String, Object>();
		
		returnMap.put("sectInfo", sectInfo);		
				
		logger.info("+ End " + className + ".orderSelect");
		
		return returnMap;		
	}
	

	
	
	
	
	
	
}