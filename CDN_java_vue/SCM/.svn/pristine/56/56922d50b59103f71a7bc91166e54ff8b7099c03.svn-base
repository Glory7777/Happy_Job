package kr.happyjob.study.scm.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.scm.model.CusInfoModel;
import kr.happyjob.study.scm.service.CusInfoService;



@Controller
@RequestMapping("/scm/")
public class CusInfoController {
	
	@Autowired
	CusInfoService cusInfoService;
	
	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	private final String className = this.getClass().toString();
	
	/**
	 * 내부직원 목록 초기 화면
	 */
	@RequestMapping("customerInfo.do")
	public String cusInfo(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".cusInfo");
		logger.info("   - paramMap : " + paramMap);
		
		logger.info("+ End " + className + ".cusInfo");

		return "scm/CusInfo";
	}
	
	/**
	 * 내부직원 목록 조회
	 */
	@RequestMapping("cusInfoList.do")
	public String cusInfoList(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".cusInfoList");
		logger.info("   - paramMap : " + paramMap);
		
		int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));   
		int currntPage = Integer.parseInt((String) paramMap.get("currntPage"));   
		int startpoint = ( currntPage - 1 ) * pageSize;
		
		paramMap.put("pageSize", pageSize);
		paramMap.put("startpoint", startpoint);
		
		List<CusInfoModel> cusInfoList = cusInfoService.cusInfoList(paramMap);
		
		int totalcnt = cusInfoService.cusInfoTotalCnt(paramMap);
				
		model.addAttribute("cusInfoList", cusInfoList);
		model.addAttribute("totalcnt", totalcnt);
		
		logger.info("+ End " + className + ".cusInfoList");

		return "scm/CusInfoList";
	}

	/**
	 * 내부직원 한건 조회(상세보기)
	 */
	@RequestMapping("cusInfoSelect.do")
	@ResponseBody
	public Map<String, Object> cusInfoSelect(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".cusInfoSelect");
		logger.info("   - paramMap : " + paramMap);
				
		CusInfoModel	sectinfo = cusInfoService.cusInfoSelect(paramMap);
				
		Map<String, Object> returnmap = new HashMap<String, Object>();
		
	    returnmap.put("sectinfo", sectinfo);
	    
		logger.info("   - sectinfo : " + sectinfo);
		logger.info("   - returnmap : " + returnmap);
		logger.info("+ End " + className + ".cusInfoSelect");

		return returnmap;
	}
	
	/**
	 * 내부직원 신규 등록
	 */
	@RequestMapping("cusInfoSave.do")
	@ResponseBody
	public Map<String, Object> cusInfoSave(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".cusInfoSave");
		
		String action = (String) paramMap.get("action");
		
		logger.info("   - action : " + action);
		
		int sqlreturn = 0;
				
		if("I".equals(action)) {
			sqlreturn = cusInfoService.insertCusInfo(paramMap);
		} else if("U".equals(action)) {
			sqlreturn = cusInfoService.updateCusInfo(paramMap);
		} else if("D".equals(action)) {
			sqlreturn = cusInfoService.deleteCusInfo(paramMap);
		}
		
		Map<String, Object> returnmap = new HashMap<String, Object>();
		
		if(sqlreturn >= 0) {
			returnmap.put("result", "SUCCESS");
		} else {
			returnmap.put("result", "FAIL");
		}
		
		logger.info("   - paramMap : " + paramMap);
		logger.info("   - sqlreturn : " + sqlreturn);
		logger.info("   - returnmap : " + returnmap);
		logger.info("+ End " + className + ".cusInfoSave");

		return returnmap;
	}

}
